Séance 3

Il faut qu’il s’arrête pile quand il se prend le mur, meme si c’est une demi distance comparé a la vitesse

On fait de l’ia, pas de la physique

On veut que le robot puisse se cogner, il doit se cogner 

Mettre le temps estimé et le temps vraiment mis dans la meme parenthèse pour qu’on puisse voir ca directement sans cliquer sur la tache

Etre plus rigoureux sur la façon de rédiger les choses 

Le problème est que la representation graphique a des attributs du robot propres a elle 
Peut on pas plutôt déduire la representation graphique de l’objet robot directement ?
On peut déduire le rectangle de la position du robot, on n’a pas besoin d’une representation du rectangle (modélisation du robot) elle meme 

@set et @get : accepteurs en python qui permettent d’acceder a un () comme une variable 

La on stocke dans le robot des choses dont on n’a pas besoin (les points du robot) alors qu’on pourrait avoir une méthode qui les renvoie 

Au lieu d’utiliser des print, en python il y a un module logging qui permet d’avoir des retours propres 

Matrice : pas une liste de liste, on utilisera plutôt les array de bumpy

Trop de melanges pas assez de separation
Pas assez de commentaires

Simuler les moteurs, ou au moins son fonctionnement

Il faut une notion de temps, et non pas de pas
On est en temps discret, il faut qqch en temps continu
Horloge externe qui fait des tick tick tick, et qqch se passe a chaque tick

Une fois que le temps est géré, il y a pleins ‘autres choses qui vont changer

« Fais tourner tes moteurs a telle vitesse » : on veut simuler la physique
Vitesse1 et vitesse2 a chacun des deux roues : et après on obtient la distance 
-> en déduire ce qu’il se passe en terme de déplacement et d’angle
-> difference de vitesse, que pasa 

Pas de capteur de distance 

Les points les plus importants pour avoir une version alpha :
-simulation temps
-simulation moteur physique
-capteur de distance

-séparation entre simulation et envi
-séparer le contrôle du robot et le robot lui meme 


-refactorisation = repasser sur le code :
-module
-tests unitaire
-documentation 

-gestion du temps (un peu couplé avec la refactorisation)
-simulation physique (en lien avec la vitesse et le temps en un sens)
-capteur de distance 