Objectif.s semaine :
Commencer à adapter les fonctions du robot simu pour le robot réel.
Régler les quelques problèmes de controleur actuel.


Avis global : plutôt impressionnés dans l'ensemble. On est potentiellement le 2eme groupe.

Code: 
Le robot est trop intelligent. Enlever les touches de déplacement facile, elle n'ont pas à etre dans robot (et etre tout court).
L'interface ne doit pas etre mélangée au code: faire un fichier source comme en html au pire.
Les tests unitaires doivent bien être faits.
Pour le moment l'interface est le centre du projet. Les fonctions fonctionnent pour elle, ce n'est pas le but.
Dans le controleur : pas de time.sleep (claude?). Faire attention au stop : il doit juste etre un test, pas un véritable stop. 
Les roues ne doivent pas être mises à 0 à cause de lui. Pas faire d'appel récursif: mal/pas géré en python. (Maëlle a compris)
Pour les deux robots (simu et réel) : on doit avoir 2 classes avec les méthodes des 2 versions. On ne devra pas avoir de différence entre simu et réel.
"C'est pas grave si tu sautes par la fenêtre"
Il reste encore des constantes: au pire faire un fichier de config/paramètres.

Github: 
Attention aux commits (1commit de merge manuel)

Rien sur le Trello.

---------- BROUILLON ----------
TOBY

On a été très inpressionné par la démo - Il faut dire je, pas nous
Explications de la matrice 

Notre robot est trop intelligent. Les touches faciles sont bizarres. Les enlever, pas dans robot.
L'interface graphique ne doit pas etre mélangée au code normal.

Attention aux commits (Claude - commit merge ines)
Bien faire les tests unitaires.

Problème avec la distance?
L'environnement contient tout. 
Fonction de capteurDistance bien (bonne réponse :)

L'interface graphique est le centre de notre projet pour le moment 3/4 (?) des fonctions sont centrées dessus mais ne sont pas globales. On va devoir refaire plein de trucs après.

Controleur, pas de time.sleep. 
Distance parcourue? 

Mesure de sécurité : step if not stop? (bouton rouge d'arret) est ce que j'ai fini la stratégie
Stop devrait juste etre le test : est ce que j'arrete, est ce que j'arrete pas? pas de blocage de roue, dépend des stratégies : pas mettre les roues à 0 quand, if stop > roues0 ou pas.
Mettre à 0 seulement à la fin de la stratégie. Maelle a compris. 
Step donne les ordres : si not stop > remettre les vitesses à 30. En tout cas: pas d'appel récursif > faire le while true sans ça.

Code avec robot simulé, code avec robot graphique. On devrait avoir deux versions avec les deux méthodes. 
Quand on aura le vrai robot, on aura tout sur lui. On doit pas avoir de différence entre le vrai robot et l'interface.

Question de maelle sur controleur.
C'est pas grave si tu sautes par la fenetre. 
Fini les constantes. Avoir un fichier de paramètres.


INES 

Le prof comprend rien 

Attention au niveau conception, que ca puisse pas faire plusieurs trucs en meme temps, sinon on sait plus d’ou viennent les ordres

Mettre les ressources logo et tout dans un autre répertoire que interface

On prend l’interface graphique comme point de départ alors que ca devrait pas 


Faire distinction robot reel robot créé

« C’est pas grave si tu sautes par la fenêtre »